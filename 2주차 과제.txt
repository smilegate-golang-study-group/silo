Println->인자값을 전달하여출력
Printf-> 원하는 포맷으로 변경하여 출력

> Value 
1) fmt.Println("go" + "lang") -> 문자열 조합
2) fmt.Println("1+1=", 1+1) -> 숫자 더하기
3) fmt.Println(true && false) -> true & false 일때 false 출력
4) fmt.Println(true || false) -> or 조건이면 ture출력
5) fmt.Println(!true)-> true not이면 faluse 출력

> Variables -> 변수
1) var a = "initial"
fmt.Println(a)
-> 문자열 변수 출력
2) var b, c int = 1, 2
    fmt.Println(b, c)
-> 2개 정수형 변수 선언후 출력
3) var d = true
   fmt.Println(d)
-> true 선언후 출력
4) var e int
   fmt.Println(e)
-> 정수형 디폴트값 출력
5) f := "apple"
	fmt.Println(f)
-> 문자열 선언후 출력

> Constants -> 자연상수
const n = 500000000
const d = 3e20 / n
fmt.Println(d) -> d 출력
fmt.Println(int64(d)) -> int64로 변환
fmt.Println(math.Sin(n)) -> Sin함수이용출력

> Pointers -> 변수 메모리 주소값
zeroval -> 값을 복사
zeroptr -> 메모리 주소값할당
*int -> 포인터타입

-> zeroval 함수
func zeroval(a int) {
	a = 0
}

-> zeroptr 포인터 할당
func zeroptr(b *int) {
	*b = 0
}

func main() {
	i := 1 -> 1선언
	fmt.Println("initial:", i)

	zeroval(i) -> 함수호출
	fmt.Println("zeroval:", i)

	zeroptr(&i) -> &레퍼런스를 넘김
	fmt.Println("zeroptr:", i)
              -> 메모리 주소 호출
	fmt.Println("pointer:", &i)
}


Strings and Runes

%x -> 숫자와 영문 소문자로 16진수를 표현
RuneCountInString -> 문자열 실제 길이를 구함
%d -> 10진수로 표현
DecodeRuneInString ->문자열 첫글자를 디코딩
DecodeRuneInString(s[i:]) -> 배열순대로 디코딩